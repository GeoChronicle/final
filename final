import React, { useState, useEffect } from 'react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Button } from '@/components/ui/button';

const WORDS = [
  'BASALT', 'GNEISS', 'MARBLE', 'SCHIST', 'HALITE', 'QUARTZ', 'GARNET',
  'SHALES', 'GRANITE', 'PUMICE', 'CALCITE', 'DACITE', 'GABBRO', 'IGNEOUS'
];

const KEYBOARD_ROWS = [
  ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
  ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
  ['Z', 'X', 'C', 'V', 'B', 'N', 'M']
];

const GeoGuess = () => {
  const [solution] = useState(() => WORDS[Math.floor(Math.random() * WORDS.length)]);
  const [guesses, setGuesses] = useState([]);
  const [currentGuess, setCurrentGuess] = useState('');
  const [gameOver, setGameOver] = useState(false);
  const [message, setMessage] = useState('');

  const checkGuess = (guess) => {
    const result = [];
    const solutionChars = [...solution];
    
    // First pass: mark correct positions
    for (let i = 0; i < guess.length; i++) {
      if (guess[i] === solution[i]) {
        result[i] = 'correct';
        solutionChars[i] = null;
      }
    }
    
    // Second pass: mark present but wrong position
    for (let i = 0; i < guess.length; i++) {
      if (!result[i]) {
        const index = solutionChars.indexOf(guess[i]);
        if (index > -1) {
          result[i] = 'present';
          solutionChars[index] = null;
        } else {
          result[i] = 'absent';
        }
      }
    }
    
    return result;
  };

  const onKeyPress = (key) => {
    if (gameOver) return;

    if (key === 'ENTER') {
      if (currentGuess.length !== 6) {
        setMessage('Word must be 6 letters long!');
        return;
      }
      
      const newGuesses = [...guesses, { word: currentGuess, result: checkGuess(currentGuess) }];
      setGuesses(newGuesses);
      setCurrentGuess('');
      
      if (currentGuess === solution || newGuesses.length >= 6) {
        setGameOver(true);
        setMessage(currentGuess === solution ? 'Congratulations! You won!' : `Game Over! The word was ${solution}`);
      }
    } else if (key === 'BACKSPACE') {
      setCurrentGuess(prev => prev.slice(0, -1));
      setMessage('');
    } else if (currentGuess.length < 6) {
      setCurrentGuess(prev => prev + key);
      setMessage('');
    }
  };

  useEffect(() => {
    const handleKeydown = (e) => {
      if (e.key === 'Enter') {
        onKeyPress('ENTER');
      } else if (e.key === 'Backspace') {
        onKeyPress('BACKSPACE');
      } else if (/^[A-Za-z]$/.test(e.key)) {
        onKeyPress(e.key.toUpperCase());
      }
    };

    window.addEventListener('keydown', handleKeydown);
    return () => window.removeEventListener('keydown', handleKeydown);
  }, [currentGuess, gameOver]);

  return (
    <div className="max-w-lg mx-auto p-4">
      <h1 className="text-2xl font-bold text-center mb-4">GeoGuess</h1>
      <p className="text-center mb-4">Guess the 6-letter geology term!</p>
      
      {message && (
        <Alert className="mb-4">
          <AlertDescription>{message}</AlertDescription>
        </Alert>
      )}

      {/* Game Grid */}
      <div className="grid gap-2 mb-4">
        {[...Array(6)].map((_, rowIndex) => (
          <div key={rowIndex} className="grid grid-cols-6 gap-2">
            {[...Array(6)].map((_, colIndex) => {
              const guess = guesses[rowIndex]?.word?.[colIndex] || '';
              const status = guesses[rowIndex]?.result?.[colIndex] || '';
              const isCurrent = rowIndex === guesses.length && colIndex < currentGuess.length;
              
              return (
                <div
                  key={colIndex}
                  className={`
                    w-12 h-12 border-2 flex items-center justify-center text-xl font-bold
                    ${isCurrent ? 'border-gray-400' : 'border-gray-200'}
                    ${status === 'correct' ? 'bg-green-500 text-white border-green-500' : ''}
                    ${status === 'present' ? 'bg-yellow-500 text-white border-yellow-500' : ''}
                    ${status === 'absent' ? 'bg-gray-500 text-white border-gray-500' : ''}
                  `}
                >
                  {isCurrent ? currentGuess[colIndex] : guess}
                </div>
              );
            })}
          </div>
        ))}
      </div>

      {/* Keyboard */}
      <div className="grid gap-2">
        {KEYBOARD_ROWS.map((row, rowIndex) => (
          <div key={rowIndex} className="flex justify-center gap-1">
            {rowIndex === 2 && (
              <Button
                className="px-4 py-2"
                onClick={() => onKeyPress('ENTER')}
              >
                Enter
              </Button>
            )}
            {row.map(key => (
              <Button
                key={key}
                className="px-3 py-2"
                onClick={() => onKeyPress(key)}
              >
                {key}
              </Button>
            ))}
            {rowIndex === 2 && (
              <Button
                className="px-4 py-2"
                onClick={() => onKeyPress('BACKSPACE')}
              >
                ‚Üê
              </Button>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default GeoGuess;
